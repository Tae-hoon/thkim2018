[{"D:\\nodejs\\board-react-client\\src\\index.js":"1","D:\\nodejs\\board-react-client\\src\\reportWebVitals.js":"2","D:\\nodejs\\board-react-client\\src\\App.js":"3","D:\\nodejs\\board-react-client\\src\\Board.js":"4"},{"size":642,"mtime":1607585732050,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":2058,"mtime":1607605875172,"results":"8","hashOfConfig":"6"},{"size":22468,"mtime":1607664054040,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1xbor99",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"D:\\nodejs\\board-react-client\\src\\index.js",[],["21","22"],"D:\\nodejs\\board-react-client\\src\\reportWebVitals.js",[],"D:\\nodejs\\board-react-client\\src\\App.js",["23"],"import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './Board';\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\nexport default App;\n*/\n\nclass App extends Component {\n  static propTypes = {\n    cookies: instanceOf(Cookies).isRequired\n  };\n\n  static defaultProps = {\n    menu1: true,\n    menu2: false,\n    boardType: 'board'\n  }\n\n  constructor(props) {\n    super(props);\n    const { cookies } = this.props;\n\n    console.log(\"App constructor:\"+cookies.get('menu1')+\", \"+cookies.get('menu2'));\n\n    this.state = {\n      menu1: (cookies.get('menu1') !== '') ? cookies.get('menu1') : this.props.menu1,\n      menu2: (cookies.get('menu2') !== '') ? cookies.get('menu2') : this.props.menu2,\n      boardType: (cookies.get('boardType') !== '') ? cookies.get('boardType') : this.props.boardType,\n    }\n    this.handleCreate = this.handleCreate.bind(this);\n  }\n\n  handleCreate(data) {\n    console.log(\"App handleCreate:\"+data.boardType);\n    const { cookies } = this.props;\n\n    cookies.set('menu1', data.menu1, { path: '/' });\n    cookies.set('menu2', data.menu2, { path: '/' });\n    cookies.set('boardType', data.boardType, { path: '/' });\n\n    /* this.setState({\n      menu1: data.menu1,\n      menu2: data.menu2,\n      boardType: data.boardType\n    }); */\n  }\n\n  render() {\n    return (\n      <div><Board key={this.state.boardType} boardType={this.state.boardType} menu1={this.state.menu1} menu2={this.state.menu2} onCreate={this.handleCreate} /></div>      \n    );\n  }\n}\n\nexport default withCookies(App);","D:\\nodejs\\board-react-client\\src\\Board.js",["24","25","26","27"],"import React, { useState, Component, Fragment } from 'react';\r\n\r\nclass Board extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this._isMounted = false;\r\n        this.state = {\r\n            menu1: this.props.menu1,\r\n            menu2: this.props.menu2,\r\n            boardType: this.props.boardType,\r\n            boardData: {\r\n                id: '',\r\n                title: '',\r\n                contents: '',\r\n                fname: ''\r\n            }\r\n        }\r\n\r\n        this.menuClick = this.menuClick.bind(this);\r\n        this.menuClick2 = this.menuClick2.bind(this);\r\n        this.handleCreate = this.handleCreate.bind(this);\r\n        this.handleCreate2 = this.handleCreate2.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('===Board componentDidMount:'+this.props.boardType);\r\n        this._ismounted = true;\r\n\r\n        if( this.props.boardType === 'board' ){\r\n            this.setState({\r\n                menu1: true,\r\n                menu2: false,\r\n            });\r\n        }else{\r\n            this.setState({\r\n                menu1: false,\r\n                menu2: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('===Board componentWillUnmount');\r\n        this._ismounted = false;\r\n    }\r\n\r\n    menuClick() {\r\n        fetch('/board')\r\n        .then(response => response.text())\r\n        .then(data => {            \r\n            \r\n            //console.log(\"boardType:\"+data);\r\n\r\n            this.setState({\r\n                menu1: true,\r\n                menu2: false,\r\n                boardType: data,\r\n            }, () => this.props.onCreate(this.state) );\r\n        });\r\n    }\r\n\r\n    menuClick2() {\r\n        fetch('/board2')\r\n        .then(response => response.text())\r\n        .then(data => {            \r\n            \r\n            //console.log(\"boardType:\"+data);\r\n\r\n            this.setState({\r\n                menu1: false,\r\n                menu2: true,\r\n                boardType: data,\r\n            }, () => this.props.onCreate(this.state) );\r\n        });\r\n    }\r\n\r\n    handleCreate(data) {\r\n        //console.log(\"Board handleCreate:\"+data.boardData.title);\r\n\r\n        if( this._ismounted ){\r\n            this.setState({\r\n                boardData: data.boardData\r\n            });\r\n        }\r\n    }\r\n\r\n    handleCreate2(data) {\r\n        //console.log(\"Board handleCreate2:\"+data.title);\r\n\r\n        if( this._ismounted ){\r\n            this.setState({\r\n                boardData: {id: this.state.boardData.id, title: this.state.boardData.title, contents: this.state.boardData.contents, date: this.state.boardData.date, fname: data.fname}\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //console.log('===Board render:'+this.props.boardType);\r\n        //console.log(\"menu1:\"+this.state.menu1);\r\n        //console.log(\"menu2:\"+this.state.menu2);\r\n        return (\r\n            <div className=\"card\">\r\n                <h1>react board</h1>\r\n                <div className=\"card-header\">\r\n                    <ul className=\"nav nav-tabs\">\r\n                    <li className=\"nav-item\">\r\n                        <a className={\"nav-link \" + (this.state.menu1 ? 'active' : '')} onClick={this.menuClick}>싱글이미지 게시판</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className={\"nav-link \" + (this.state.menu2 ? 'active' : '')} onClick={this.menuClick2}>멀티이미지 게시판</a>\r\n                    </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-4\">\r\n                            <List key={this.state.boardType} boardType={this.state.boardType} onCreate={this.handleCreate} />\r\n                        </div>\r\n                        <div className=\"col-lg-5\">\r\n                            <Detail key={this.state.boardType+this.state.boardData.id} id={this.state.boardData.id} title={this.state.boardData.title} contents={this.state.boardData.contents} date={this.state.boardData.date} fname={this.state.boardData.fname} boardType={this.state.boardType} onCreate={this.handleCreate2} />\r\n                        </div>\r\n                        <div className=\"col-lg-3\">\r\n                            <Image key={this.state.boardType+this.state.boardData.id+this.state.boardData.fname} boardType={this.state.boardType} fname={this.state.boardData.fname} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-footer\">SpringBoot + MongoDB + <strong>React</strong> + bootstrap4 게시판 만들기</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this._isMounted = false;\r\n        this.state = {\r\n            boardList: [],\r\n            boardData: {\r\n                id: '',\r\n                title: '',\r\n                contents: '',\r\n                fname: ''\r\n            }\r\n        }\r\n\r\n        this.setBoardData = this.setBoardData.bind(this);\r\n        this.handleCreate = this.handleCreate.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('===List componentDidMount');\r\n        this._isMounted = true;\r\n\r\n        fetch('/list')\r\n        .then(response => response.json())\r\n        .then(data => {            \r\n            \r\n            //console.log(data);\r\n            let boardData = {};\r\n            for(var i=0; i<data.list.length; i++){\r\n                var contents = data.list[i].contents;\r\n                //console.log(contents);\r\n                //contents = contents.replace(/\\n/gi,'\\\\n');\r\n\r\n                if( i === 0 ){\r\n\r\n                    boardData = {id: data.list[i].id, title: data.list[i].title, contents: contents, date: data.list[i].date, fname: data.list[i].fname};\r\n\r\n                    this.setState({\r\n                        boardData: boardData\r\n                    }, () => this.setBoardData() );\r\n                }\r\n            }\r\n\r\n            const boardList = data.list.map(item => (\r\n                <ListData key={item.id} id={item.id} title={item.title} contents={item.contents} date={item.date} fname={item.fname} onCreate={this.handleCreate} />\r\n            ));\r\n\r\n            this.setState({\r\n                boardList: boardList\r\n            });\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //console.log('===componentWillUnmount');\r\n        this._ismounted = false;\r\n    }\r\n\r\n    setBoardData(){\r\n\r\n        //초기화시 실행\r\n        //console.log(\"list data:\"+this.state.boardData.title);\r\n\r\n        this.props.onCreate(this.state);\r\n    }\r\n\r\n    handleCreate(data) {\r\n\r\n        //행클릭시 실행\r\n        //console.log(\"List handleCreate:\"+data.boardData.title);\r\n\r\n        if( this._isMounted ){\r\n            this.setState({\r\n                boardData: data.boardData\r\n            }, () => this.props.onCreate(this.state) );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const divStyle = {\r\n            minHeight: '500px',\r\n            maxHeight: '500px',\r\n            overflowY: 'auto'\r\n        };\r\n\r\n        return (\r\n            <div className=\"card\" style={divStyle}>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                        <th>게시물 리스트</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {/* <tr>\r\n                            <td>게시물 1</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>게시물 2</td>\r\n                        </tr> */}\r\n                        {this.state.boardList}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ListData extends Component {  \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this._ismounted = false;\r\n        this.state = {\r\n            boardData: {\r\n                id: '',\r\n                title: '',\r\n                contents: '',\r\n                fname: ''\r\n            }\r\n        }\r\n\r\n        this.setDetail = this.setDetail.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('===ListData componentDidMount:'+this.props.id);\r\n        this._ismounted = true;\r\n\r\n        /* this.setState({\r\n            boardData: {id: this.props.id, title: this.props.title, contents: this.props.contents, date: this.props.date, fname: this.props.fname}\r\n        }, () => this.props.onCreate(this.state) ); */\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //console.log('===componentWillUnmount');\r\n        this._ismounted = false;\r\n    }\r\n\r\n    setDetail(){\r\n        //console.log(\"title:\"+this.props.title);\r\n\r\n        if( this._ismounted ){\r\n            this.setState({\r\n                boardData: {id: this.props.id, title: this.props.title, contents: this.props.contents, date: this.props.date, fname: this.props.fname}\r\n            }, () => this.props.onCreate(this.state) );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const lineStyle = {\r\n            float: 'right',\r\n        };\r\n\r\n        return (\r\n            <tr onClick={this.setDetail}>\r\n                <td>{this.props.title}<span style={lineStyle}>{this.props.date}</span></td>\r\n            </tr>            \r\n        );\r\n    }\r\n}\r\n\r\nclass Detail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this._ismounted = false;\r\n        this.state = {\r\n            id: '',\r\n            title: '',\r\n            contents: '',\r\n            fname: '',\r\n            //selectedFiles: null\r\n        }\r\n\r\n        this.idRef = React.createRef();\r\n        this.titleRef = React.createRef();\r\n        this.contentsRef = React.createRef();\r\n        this.fileRef = React.createRef();\r\n\r\n        this.save = this.save.bind(this);\r\n        this.cancel = this.cancel.bind(this);\r\n        this.del = this.del.bind(this);\r\n        this.delimg = this.delimg.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.fileHandler = this.fileHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('===Detail componentDidMount');\r\n        this._ismounted = true;\r\n\r\n        if( this.props.title !== undefined && this.props.title !== '' ){\r\n            //console.log(\"detail title:\"+this.props.title);\r\n            \r\n            if( this._ismounted ){\r\n                this.setState({\r\n                    id: this.props.id,\r\n                    title: this.props.title,\r\n                    contents: this.props.contents,\r\n                    fname: this.props.fname\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //console.log('===componentWillUnmount');\r\n        this._ismounted = false;\r\n    }\r\n\r\n    save(e) {\r\n        if( this.props.title !== undefined && this.props.title !== '' ){\r\n            //console.log(\"==save==:\"+this.props.title);\r\n\r\n            //console.log(\"boardType:\"+this.props.boardType);\r\n            //console.log(\"id:\"+this.idRef.current.value);\r\n            //console.log(\"title:\"+this.titleRef.current.value);\r\n            //console.log(\"file1:\"+this.fileRef.current.files[0].name);\r\n            //console.log(\"file2:\"+this.fileRef.current.files.length);\r\n            //console.log(\"file3:\"+this.state.selectedFiles);\r\n\r\n            if( !window.confirm(\"저장하시겠습니까?\") ){\r\n                return;\r\n            }\r\n            \r\n            let formData = new FormData();\r\n            formData.append('id', this.idRef.current.value);\r\n            formData.append('title', this.titleRef.current.value);\r\n            formData.append('contents', this.contentsRef.current.value);\r\n            //formData.append('file', this.state.selectedFiles);\r\n\r\n            if( this.props.boardType === 'board' ){\r\n                formData.append('file', this.fileRef.current.files[0]);\r\n            }else if( this.props.boardType === 'board2' ){\r\n                if( this.fileRef.current.files.length > 0 ){\r\n                    for(let i=0; i<this.fileRef.current.files.length; i++){\r\n                        formData.append('file', this.fileRef.current.files[i]);\r\n                    }\r\n                }else{\r\n                    formData.append('file', this.fileRef.current.files[0]);\r\n                }\r\n            }\r\n            \r\n            let url = \"/add\";\r\n            if( this.props.boardType === 'board' ){\r\n                if( this.idRef.current.value !== '' ){                \r\n                    url = \"/mod\";\r\n                }\r\n            }else if( this.props.boardType === 'board2' ){\r\n                url = \"/add2\";\r\n                if( this.idRef.current.value !== '' ){                \r\n                    url = \"/mod2\";\r\n                }\r\n            }\r\n\r\n            fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    //'Content-Type': 'application/json',\r\n                    //\"content-type\": \"multipart/form-data\"\r\n                },\r\n                body: formData\r\n              })\r\n            .then(response => response.json())\r\n            .then(data => {            \r\n                \r\n                if(data.returnCode === 'success'){\r\n                    window.location.reload();\r\n                }else{\r\n                    window.alert(data.returnDesc);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    cancel(e) {\r\n        if( this.props.title !== undefined && this.props.title !== '' ){\r\n            //console.log(\"==cancel==:\"+this.props.title);\r\n\r\n            this.setState({\r\n                id: '',\r\n                title: '',\r\n                contents: '',\r\n                fname: ''\r\n            }, () => this.props.onCreate(this.state) );\r\n        }\r\n    }\r\n\r\n    del(e) {\r\n        if( this.props.title !== undefined && this.props.title !== '' ){\r\n            //console.log(\"==del==:\"+this.props.title);\r\n\r\n            if( this.idRef.current.value === '' ){\r\n                window.alert(\"삭제할 데이터가 없습니다.\");\r\n                return;\r\n            }\r\n            if( !window.confirm(\"삭제하시겠습니까?\") ){\r\n                return;\r\n            }\r\n            \r\n            let formData = new FormData();\r\n            formData.append('id', this.idRef.current.value);\r\n            formData.append('title', this.titleRef.current.value);\r\n            formData.append('contents', this.contentsRef.current.value);\r\n            \r\n            fetch('/del', {\r\n                method: 'POST',\r\n                headers: {\r\n                    //'Content-Type': 'application/json',\r\n                },\r\n                body: formData\r\n              })\r\n            .then(response => response.json())\r\n            .then(data => {            \r\n                \r\n                if(data.returnCode === 'success'){\r\n                    window.location.reload();\r\n                }else{\r\n                    window.alert(data.returnDesc);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    delimg(e) {\r\n\r\n        if( this.props.title !== undefined && this.props.title !== '' ){\r\n            if( this.idRef.current.value === '' ){\r\n                window.alert(\"삭제할 데이터가 없습니다.\");\r\n                return;\r\n            }\r\n            if( !window.confirm(\"그림을 삭제하시겠습니까?\") ){\r\n                return;\r\n            }\r\n            \r\n            let formData = new FormData();\r\n            formData.append('id', this.idRef.current.value);\r\n            formData.append('title', this.titleRef.current.value);\r\n            formData.append('contents', this.contentsRef.current.value);\r\n            \r\n            fetch('/delimg', {\r\n                method: 'POST',\r\n                headers: {\r\n                    //'Content-Type': 'application/json',\r\n                },\r\n                body: formData\r\n              })\r\n            .then(response => response.json())\r\n            .then(data => {            \r\n                \r\n                if(data.returnCode === 'success'){\r\n                    window.location.reload();\r\n                }else{\r\n                    window.alert(data.returnDesc);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChange(){\r\n        if( this._ismounted ){\r\n            this.setState({\r\n                id: this.idRef.current.value,\r\n                title: this.titleRef.current.value,\r\n                contents: this.contentsRef.current.value,\r\n            });\r\n        }\r\n    }\r\n\r\n    fileHandler = (e) => {\r\n        /* console.log(\"file selected\");\r\n        const files = e.target.files;\r\n          this.setState({\r\n            selectedFiles: files\r\n        }) */\r\n    };\r\n\r\n    render() {\r\n\r\n        const divStyle = {\r\n            minHeight: '500px',\r\n            maxHeight: '1000px'\r\n        };\r\n        const divCenter = {\r\n            textAlign: 'center',\r\n        };\r\n\r\n        return (\r\n            <div className=\"card bg-light text-dark\" style={divStyle}>\r\n                <form name=\"form1\" action=\"\">\r\n                    <div className=\"form-group\">\r\n                    <label className=\"control-label\">제목:</label>\r\n                    <div>\r\n                        <input type=\"text\" ref={this.titleRef} className=\"form-control\" placeholder=\"제목을 입력하세요\" onChange={this.handleChange} value={this.state.title} />\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                    <label className=\"control-label\">내용:</label>\r\n                    <div> \r\n                        <textarea className=\"form-control\" ref={this.contentsRef} rows=\"10\" onChange={this.handleChange} value={this.state.contents}></textarea>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label className=\"control-label\">이미지첨부: jpg,gif,png</label>\r\n                        <div>\r\n                            {\r\n                            (this.props.boardType === 'board')\r\n                            ? <input type=\"file\" ref={this.fileRef} className=\"form-control\" onChange={this.fileHandler} name=\"file\" />\r\n                            : <input type=\"file\" ref={this.fileRef} className=\"form-control\" multiple onChange={this.fileHandler} name=\"file\" />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <input type=\"hidden\" ref={this.idRef} name=\"id\" value={this.state.id} />\r\n                </form>\r\n                <div style={divCenter}>\r\n                    <div className=\"btn-group\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.save}>저장</button>\r\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={this.cancel}>취소</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={this.del}>삭제</button>\r\n                        <button type=\"button\" className=\"btn btn-info\" onClick={this.delimg}>그림삭제</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Image extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this._ismounted = false;\r\n        this.state = {\r\n            image: '',\r\n            imageList: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.createMarkup = this.createMarkup.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('===Image componentDidMount:'+this.props.boardType);\r\n        this._ismounted = true;\r\n\r\n        if( this._ismounted ){\r\n            if( this.props.boardType === 'board' ){\r\n\r\n                if( this.props.fname !== '' ){\r\n                    fetch('/img?fname='+encodeURIComponent(this.props.fname))\r\n                    .then(response => response.text())\r\n                    .then(data => {            \r\n                        \r\n                        //console.log(\"image:\"+data);\r\n\r\n                        this.setState({\r\n                            image: \"data:image/jpeg;base64,\"+data\r\n                        });\r\n                    });\r\n                }\r\n\r\n            }else if( this.props.boardType === 'board2' ){\r\n\r\n                if( this.props.fname !== '' ){\r\n                    fetch('/img2?fname='+encodeURIComponent(this.props.fname))\r\n                    .then(response => response.text())\r\n                    .then(data => {            \r\n                        \r\n                        //console.log(\"image:\"+data);\r\n\r\n                        this.setState({\r\n                            imageList: data\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //console.log('===componentWillUnmount');\r\n        this._ismounted = false;\r\n    }\r\n\r\n    handleChange(){\r\n\r\n    }\r\n\r\n    createMarkup() {\r\n        return {__html: this.state.imageList};\r\n    }\r\n\r\n    render() {\r\n        const divStyle1 = {\r\n            minHeight: '500px',\r\n            maxHeight: '500px',\r\n            overflowY: 'auto',\r\n            display: 'block'\r\n        };\r\n        const divStyle1_1 = {\r\n            minHeight: '500px',\r\n            maxHeight: '1000px',\r\n            display: 'none'\r\n        };\r\n        const divStyle2 = {\r\n            minHeight: '500px',\r\n            maxHeight: '500px',\r\n            overflowY: 'auto',\r\n            display: 'block'\r\n        };\r\n        const divStyle2_1 = {\r\n            minHeight: '500px',\r\n            maxHeight: '1000px',\r\n            display: 'none'\r\n        };\r\n        const imgStyle = {\r\n            width: '100%',\r\n        };\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"card bg-light text-dark\" style={(this.props.boardType === 'board') ? divStyle1 : divStyle1_1}>\r\n                    <img style={imgStyle} alt=\"image\" onChange={this.handleChange} src={this.state.image}></img>\r\n                </div>\r\n                <div className=\"card bg-light text-dark\" style={(this.props.boardType === 'board2') ? divStyle2 : divStyle2_1}>\r\n                    <span dangerouslySetInnerHTML={this.createMarkup()}></span>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Board;",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":12},{"ruleId":"32","severity":1,"message":"36","line":1,"column":17,"nodeType":"34","messageId":"35","endLine":1,"endColumn":25},{"ruleId":"37","severity":1,"message":"38","line":108,"column":25,"nodeType":"39","endLine":108,"endColumn":114},{"ruleId":"37","severity":1,"message":"38","line":111,"column":25,"nodeType":"39","endLine":111,"endColumn":115},{"ruleId":"40","severity":1,"message":"41","line":655,"column":21,"nodeType":"39","endLine":655,"endColumn":107},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]